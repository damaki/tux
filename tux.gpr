with "config/tux_config.gpr";
project Tux is

   for Library_Name use "tux";
   for Library_Version use Project'Library_Name & ".so." & Tux_Config.Crate_Version;

   Keccak_Enabled := Tux_Config.Keccak_Enabled;

   --  Configure SHA-1 source directories based on the selected implementation

   SHA1_Dirs := ();
   SHA1_Self_Test_Dirs := ();
   case Tux_Config.SHA1_Enabled is
      when "True" =>
         SHA1_Dirs           := ("src/spark/sha1/enabled");
         SHA1_Self_Test_Dirs := ("src/spark/sha1/self_test/");
      when others =>
         SHA1_Dirs           := ("src/spark/sha1/disabled");
   end case;

   --  Configure SHA-256 source directories based on the selected implementation

   SHA256_Dirs := ();
   SHA256_Self_Test_Dirs := ();
   case Tux_Config.SHA256_Enabled is
      when "True" =>
         SHA256_Dirs           := ("src/spark/sha256/enabled");
         SHA256_Self_Test_Dirs := ("src/spark/sha256/self_test/");
         case Tux_Config.SHA256_Backend is
            when "Speed" =>
               SHA256_Dirs := SHA256_Dirs & ("src/spark/sha256/enabled/speed/");
            when "Size"  =>
               SHA256_Dirs := SHA256_Dirs & ("src/spark/sha256/enabled/size/");
         end case;
      when others =>
         SHA256_Dirs           := ("src/spark/sha256/disabled");
   end case;

   --  Configure SHA-512 source directories based on the selected implementation

   SHA512_Dirs := ();
   SHA512_Self_Test_Dirs := ();
   case Tux_Config.SHA512_Enabled is
      when "True" =>
         SHA512_Dirs           := ("src/spark/sha512/enabled");
         SHA512_Self_Test_Dirs := ("src/spark/sha512/self_test/");
         case Tux_Config.SHA512_Backend is
            when "Speed" =>
               SHA512_Dirs := SHA512_Dirs & ("src/spark/sha512/enabled/speed/");
            when "Size"  =>
               SHA512_Dirs := SHA512_Dirs & ("src/spark/sha512/enabled/size/");
         end case;
      when others =>
         SHA512_Dirs           := ("src/spark/sha512/disabled");
   end case;

   --  Configure SHA-3 source directories based on the selected implementation

   SHA3_Dirs := ();
   SHA3_Self_Test_Dirs := ();
   case Tux_Config.SHA3_Enabled is
      when "True" =>
         Keccak_Enabled      := "True";
         SHA3_Dirs           := ("src/spark/sha3/enabled");
         SHA3_Self_Test_Dirs := ("src/spark/sha3/self_test");
      when others =>
         SHA3_Dirs           := ("src/spark/sha3/disabled");
   end case;

   --  Configure Keccak source directories based on the selected implementation

   Keccak_Dirs := ();
   case Keccak_Enabled is
      when "True" =>
         Keccak_Dirs := ("src/spark/keccak");
      when others =>
         Keccak_Dirs := (); --  No stubs needed for Keccak
   end case;

   --  Add self test directories when enabled

   Self_Test_Dirs := ();
   case Tux_Config.Self_Tests_Enabled is
      when "True" =>
         Self_Test_Dirs := SHA1_Self_Test_Dirs &
                           SHA256_Self_Test_Dirs &
                           SHA512_Self_Test_Dirs &
                           SHA3_Self_Test_Dirs;
      when others => null;
   end case;

   for Source_Dirs use ("src/spark/", "config/") &
                       SHA1_Dirs &
                       SHA256_Dirs &
                       SHA512_Dirs &
                       Keccak_Dirs &
                       SHA3_Dirs &
                       Self_Test_Dirs;
   for Object_Dir use "obj/" & Tux_Config.Build_Profile;
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("Tux_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   package Compiler is
      for Default_Switches ("Ada") use Tux_Config.Ada_Compiler_Switches &
                                       ("-fcallgraph-info=su",
                                        "-fstack-usage",
                                        "-funroll-loops");

      case Tux_Config.Build_Profile is

         --  Enable various restriction pragmas during development builds to
         --  detect use of language features that require runtime support.

         when "development" =>
            for Local_Configuration_Pragmas use "tux.adc";

         when "validation" | "release" =>
            null;
      end case;
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Install is
      for Artifacts (".") use ("share");
   end Install;

   package Prove is
      for Proof_Switches ("Ada") use ("--proof=progressive",
                                      "--no-loop-unrolling",
                                      "--no-inlining",
                                      "-j0",
                                      "--prover=all",
                                      "--timeout=60",
                                      "--memlimit=0",
                                      "--steps=7500");
   end Prove;

end Tux;
