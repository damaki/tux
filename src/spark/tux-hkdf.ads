--
--  Copyright 2023 (C) Daniel King
--
--  SPDX-License-Identifier: Apache-2.0
--
with Tux.HMAC;
with Tux.Hashing;
with Tux.Types; use Tux.Types;

--  @summary
--  HMAC-based Extract-and-Expand Key Derivation Function (HKDF).
--
--  @description
--  This package implements HKDF as defined in RFC 5869.
--
--  @group Key Derivation Algorithms
package Tux.HKDF with
  Preelaborate,
  SPARK_Mode,
  Annotate => (GNATprove, Terminating)
is

   subtype PRK_Length_Number is HMAC.HMAC_Length_Number;
   --  Represents the length of the pseudo-ranom key (PRK)

   subtype OKM_Length_Number is Byte_Count
     range 0 .. PRK_Length_Number'Last * 255;
   --  Represents the length of the output keying material (OKM)

   PRK_Length : Hashing.Hash_Length_Table renames Hashing.Hash_Length;
   --  Lookup table of PRK lengths per hash algorithm.
   --
   --  For HKDF, the PRK length is equal to the length of the hashes output
   --  by the underlying hash algorithm.

   function Max_OKM_Length
     (Algorithm : Hashing.Algorithm_Kind)
      return OKM_Length_Number
   is
     (OKM_Length_Number (PRK_Length (Algorithm)) * 255);
   --  Get the maximum permitted length of the output keying material (OKM).
   --
   --  The maximum OKM length depends on the hash algorithm used.
   --  The OKM length cannot exceed 255 times the size of the digests output
   --  by the selected hash function.
   --
   --  @param Algorithm The hash algorithm to look up.
   --  @return The maximum OKM length for the requested Algorithm.

   ----------------------------
   -- Single-Part Operations --
   ----------------------------

   procedure HKDF
     (Algorithm :     Hashing.Enabled_Algorithm_Kind;
      Salt      :     Byte_Array;
      IKM       :     Byte_Array;
      Info      :     Byte_Array;
      OKM       : out Byte_Array)
   with
     Relaxed_Initialization => OKM,
     Pre  => OKM'Length <= Max_OKM_Length (Algorithm),
     Post => OKM'Initialized;
   --  HMAC-based Extract-and-Expand Key Derivation Function (HKDF).
   --
   --  @param Algorithm The hash algorithm to use for the key derivation.
   --  @param Salt Optional salt value (a non-secret random value).
   --  @param IKM  The input keying material.
   --  @param Info Optional context and application specific information.
   --  @param OKM  Buffer to where the output keying material is written.
   --              The length of this buffer cannot exceed 255 times the
   --              length of the underlying hash length.

   procedure Extract
     (Algorithm :     Hashing.Enabled_Algorithm_Kind;
      Salt      :     Byte_Array;
      IKM       :     Byte_Array;
      PRK       : out Byte_Array)
   with
     Pre => PRK'Length = PRK_Length (Algorithm);
   --  Generate a pseudorandom key from input keying material and a salt.
   --
   --  @param Algorithm The hash algorithm to use for the key derivation.
   --  @param Salt Optional salt value (a non-secret random value).
   --  @param IKM The input keying material.
   --  @param PRK Buffer to where the pseudorandom key is written.
   --             The length of this buffer must be equal to the size of the
   --             hashes generated by the underlying hash function.

   procedure Expand
     (Algorithm :     Hashing.Enabled_Algorithm_Kind;
      PRK       :     Byte_Array;
      Info      :     Byte_Array;
      OKM       : out Byte_Array)
   with
     Relaxed_Initialization => OKM,
     Pre  => (OKM'Length <= Max_OKM_Length (Algorithm)
              and then PRK'Length >= PRK_Length (Algorithm)),
     Post => OKM'Initialized;
   --  Expand a pseudorandom key into larger output keying material.
   --
   --  @param Algorithm The hash algorithm to use for the key derivation.
   --  @param PRK The pseudorandom key. This is usually the output of the
   --             Extract procedure. This buffer must be at least as large
   --             as the length of the hashes generated by the specified
   --             Hash_Algorithm.
   --  @param Info Optional context and application specific information.
   --  @param OKM Buffer to where the output keying material is written.
   --             The length of this buffer cannot exceed 255 times the
   --             length of the hash used.

end Tux.HKDF;
