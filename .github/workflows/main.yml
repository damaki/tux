on:                    # Run the workflow for each of the following event:
  push:                # - A branch is pushed or updated.
    branches:
      - main
  pull_request:        # - A pull-request is openned or updated.
  workflow_dispatch:   # - A manual run of the workflow is requested from the GitHub web interface.
  release:
    types: [created]   # - A release is created.

jobs:

  # Build the library in the default configuration as a quick check for
  # obvious build problems
  check-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: alire-project/setup-alire@v1
        with:
          version: 1.2.0

      # Use the validation build profile to enforce static analysis and coding style.
      - name: Build
        run: |
          alr build --validation

  build-examples:
    needs: check-build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: alire-project/setup-alire@v1
        with:
          version: 1.2.0

      - name: Build Examples
        run: |
          cd examples
          ./build-examples.sh

  test:
    needs: check-build

    strategy:
      matrix:
        # Test various combinations of enabled algorithms
        sha1_enabled: ["True", "False"]
        sha256_enabled: ["True", "False"]
        sha256_backend: ["Speed"]
        sha512_enabled: ["True", "False"]
        sha512_backend: ["Speed"]
        sha3_enabled: ["True", "False"]
        shake_enabled: ["True", "False"]
        keccak_optimize: ["Speed"]
        keccak_backend: ["Lane_Complemented"]
        include:
          # Test algorithms optimised for size
          - sha1_enabled: "True"
            sha256_enabled: "True"
            sha256_backend: "Size"
            sha512_enabled: "True"
            sha512_backend: "Size"
            sha3_enabled: "True"
            shake_enabled: "True"
            keccak_optimize: "Size"
            keccak_backend: "Lane_Complemented"
          # Test Keccak generic backend (speed)
          - sha1_enabled: "True"
            sha256_enabled: "True"
            sha256_backend: "Speed"
            sha512_enabled: "True"
            sha512_backend: "Speed"
            sha3_enabled: "True"
            shake_enabled: "True"
            keccak_optimize: "Speed"
            keccak_backend: "Generic_Optimized"
          # Test Keccak generic backend (size)
          - sha1_enabled: "True"
            sha256_enabled: "True"
            sha256_backend: "Speed"
            sha512_enabled: "True"
            sha512_backend: "Speed"
            sha3_enabled: "True"
            shake_enabled: "True"
            keccak_optimize: "Size"
            keccak_backend: "Generic_Optimized"

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: alire-project/setup-alire@v1
        with:
          version: 1.2.0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Test Dependencies
        run: |
          pip install -r tests/requirements.txt

      - name: Build Tests
        run: |
          cd tests
          python make_build_crate.py \
            --output-dir=test_crate \
            --tux-build-profile=validation \
            --unit-tests-report-format=XML \
            --sha1-enabled=${{ matrix.sha1_enabled }} \
            --sha256-enabled=${{ matrix.sha256_enabled }} \
            --sha256-backend=${{ matrix.sha256_backend }} \
            --sha512-enabled=${{ matrix.sha512_enabled }} \
            --sha512-backend=${{ matrix.sha512_backend }} \
            --sha3-enabled=${{ matrix.sha3_enabled }} \
            --shake-enabled=${{ matrix.shake_enabled }} \
            --keccak-backend=${{ matrix.keccak_backend }} \
            --keccak-optimize=${{ matrix.keccak_optimize }}
          cd test_crate
          alr build

      - name: Run Known Answer Tests
        run: |
          cd tests
          pytest kat -n logical --html=kat_report.html --self-contained-html --junitxml=kat.xml

      - name: Run Unit Tests
        run: |
          cd tests
          unit_tests/bin/unit_tests > unit_tests.xml